{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/formatBalance.ts","hooks/useWeb3.ts","hooks/useContract.ts","utils/callHelpers.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","config/constants/index.ts"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","console","log","toFixed","getDecimalsFromTokenName","tokenName","toLowerCase","getDecimalsFromPid","pid","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","isUsingBnb","handleHarvest","updateUserPendingReward","updateUserBalance","UnlockButton","props","TranslateString","connect","reset","onPresentConnectModal","useWalletModal","onClick","farmsConfig","filter","farm","isCommunity","map","tokenSymbol"],"mappings":"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","file":"static/js/1.08b36560.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  console.log('Balance:')\n  console.log(balance.toNumber())\n  console.log('FullDisplayBalance:')\n  console.log(balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed())\n  console.log(decimals)\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const getDecimalsFromTokenName = (tokenName: string) => {\n  switch (tokenName.toLowerCase()) {\n    case 'usdt': {\n      return 6;\n    }\n    case 'btc': {\n      return 8;\n    }\n    case 'usdc': {\n      return 6\n    }\n    default: {\n      return 18;\n    }\n  }\n}\n\nexport const getDecimalsFromPid = (pid: number) => {\n  switch (pid) {\n    case 5: {\n      return 8;\n    }\n    case 6: {\n      return 6;\n    }\n    case 7: {\n      return 6;\n    }\n    default: {\n      return 18;\n    }\n      \n  }\n  \n} ","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { getDecimalsFromPid } from './formatBalance'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  const decimals = getDecimalsFromPid(pid) \n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account, decimals = 18) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account, decimals = 18) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  const decimals = getDecimalsFromPid(pid)\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account, decimals = 18) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n"],"sourceRoot":""}